rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isImageFile() {
      return request.resource.contentType.matches('image/.*');
    }

    function isPdfFile() {
      return request.resource.contentType.matches('application/pdf');
    }

    function isValidFileSize() {
      // 10MB for images, 50MB for PDFs
      return (isImageFile() && request.resource.size < 10 * 1024 * 1024) ||
             (isPdfFile() && request.resource.size < 50 * 1024 * 1024) ||
             (request.resource.size < 5 * 1024 * 1024); // 5MB limit for other files
    }
    
    function isValidFileType() {
      return isImageFile() || isPdfFile() ||
             request.resource.contentType.matches('application/msword') ||
             request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.wordprocessingml.document') ||
             request.resource.contentType.matches('text/.*') ||
             request.resource.contentType.matches('application/vnd.ms-excel') ||
             request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    }

    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }

    // Allow authenticated users to read and write valid files to specific paths
    match /users/{userId}/{allPaths=**} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId && isValidFileType() && isValidFileSize();
    }
    
    match /site_assets/{allPaths=**} {
        allow read: if true; // Publicly readable
        allow write: if isAuthenticated(); // Only auth users can upload
    }

    match /reconciliation_files/{allPaths=**} {
      allow read, write: if isAuthenticated();
    }
  }
}