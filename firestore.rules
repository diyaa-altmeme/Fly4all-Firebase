
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- الدالة المساعدة للتحقق من الصلاحية ---
    function hasPermission(permission) {
      // تحميل بيانات المستخدم مرة واحدة فقط (تحسين الأداء)
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return user.role == 'admin' || permission in user.permissions;
    }

    // --- مجموعة المستخدمين (Users Collection) ---
    match /users/{userId} {
      // يمكن للمستخدم قراءة بياناته الخاصة أو من لديه صلاحية users:read
      allow read: if request.auth != null && (request.auth.uid == userId || hasPermission('users:read'));
      
      // يمكن لمن لديه صلاحية إنشاء/تعديل المستخدمين القيام بذلك
      allow create: if hasPermission('users:create');
      allow update: if hasPermission('users:update');
      
      // لا يمكن حذف المستخدمين نهائيًا من طرف العميل
      allow delete: if false;
    }

    // --- مجموعة الأدوار (Roles Collection) ---
    match /roles/{roleId} {
      allow read: if hasPermission('users:permissions');
      allow create, update, delete: if hasPermission('users:permissions');
    }

    // --- الحجوزات (Bookings) - الآن جزء من journal-vouchers ---
    // The specific booking logic is now handled by the generic voucher rule below
    // and the voucherType check within server-side logic.
    
    // --- طلبات الفيزا (Visas) ---
    match /visaBookings/{visaId} {
      allow read: if hasPermission('visas:read');
      allow create: if hasPermission('visas:create');
      allow update: if hasPermission('visas:update');
      allow delete: if hasPermission('visas:delete');
    }

    // --- الاشتراكات (Subscriptions) ---
    match /subscriptions/{subId} {
      allow read: if hasPermission('subscriptions:read');
      allow create: if hasPermission('subscriptions:create');
      allow update: if hasPermission('subscriptions:update');
      allow delete: if hasPermission('subscriptions:delete');
    }
    match /subscription_installments/{paymentId} {
      allow read, create, update, delete: if hasPermission('subscriptions:payments');
    }
    
    // --- السندات والقيود الموحدة (Journal Vouchers) ---
    match /journal-vouchers/{voucherId} {
      allow read: if hasPermission('vouchers:read');
      allow create: if hasPermission('vouchers:create');
      allow update: if hasPermission('vouchers:update');
      allow delete: if hasPermission('vouchers:delete');
    }

    // --- الحوالات (Remittances) ---
    match /remittances/{remittanceId} {
      allow read: if hasPermission('remittances:read');
      allow create: if hasPermission('remittances:create');
      allow update: if hasPermission('remittances:audit') || hasPermission('remittances:receive');
      allow delete: if false; // Deletion should be handled server-side if needed
    }

    // --- العلاقات (Clients/Suppliers) ---
    match /clients/{relationId} {
      allow read: if hasPermission('relations:read');
      allow create: if hasPermission('relations:create');
      allow update: if hasPermission('relations:update');
      allow delete: if hasPermission('relations:delete');
    }

    // --- التقارير (Reports) - These are usually generated server-side, so client rules might not be necessary ---
    // But if there's a collection for saved reports:
    match /reports/{reportId} {
      allow read: if hasPermission('reports:read:all');
    }

    // --- الإعدادات العامة (Settings) ---
    match /settings/{settingId} {
      allow read: if hasPermission('settings:read');
      allow update: if hasPermission('settings:update');
    }

    // --- سجلات النظام (System Logs / Audits) ---
    match /audit_logs/{logId} {
      allow read: if hasPermission('system:audit_log:read') || hasPermission('system:error_log:read');
      allow create: if request.auth != null; // Allow any authenticated user to create a log entry
    }

    // --- رموز التحقق (Verification Codes) ---
    match /otp_requests/{userId} {
      allow read, create, update, delete: if request.auth.uid == userId;
    }
    
    // --- Collections for sequences and other system data ---
    match /sequences/{seqId} {
      allow read, write: if request.auth != null; // Allow any authenticated user for now
    }
    
    match /boxes/{boxId} {
        allow read, write: if hasPermission('admin');
    }
    
     match /ticket_operations/{opId} {
        allow read, write: if hasPermission('bookings:operations');
    }
    
    match /message_templates/{templateId} {
        allow read, write: if hasPermission('admin');
    }
    
    match /whatsapp_accounts/{accId} {
        allow read, write: if hasPermission('admin');
    }

    // --- Fallback rule (Default Deny) ---
    // This is a catch-all to ensure any path not explicitly matched is secured.
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
