rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function hasRole(role) {
      // Check for custom claims first
      if (request.auth.token.roles != null && role in request.auth.token.roles) {
        return request.auth.token.roles[role] == true;
      }
      // Fallback to user document
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isAdmin() {
      return hasRole('admin');
    }

    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }

    // Specific collection rules
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isAuthenticated(); // For new user sign-ups
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    match /roles/{roleId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    match /clients/{clientId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if hasRole('editor') || isAdmin() || hasRole('manager');
    }
    
    match /suppliers/{supplierId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if hasRole('editor') || isAdmin() || hasRole('manager');
    }
    
     match /company_groups/{groupId} {
      allow read: if isAuthenticated();
      allow write: if hasRole('manager') || isAdmin();
    }
    
     match /work_types/{typeId} {
      allow read: if isAuthenticated();
      allow write: if hasRole('manager') || isAdmin();
    }

    match /boxes/{boxId} {
      allow read: if isAuthenticated();
      allow write: if hasRole('manager') || isAdmin();
    }

    match /bookings/{bookingId} {
      allow read, create, update: if isAuthenticated();
      allow delete: if hasRole('editor') || isAdmin() || hasRole('manager');
    }
    
    match /visaBookings/{visaId} {
      allow read, create, update: if isAuthenticated();
      allow delete: if hasRole('editor') || isAdmin() || hasRole('manager');
    }
    
    match /journal-vouchers/{voucherId} {
        allow read, create, update: if isAuthenticated();
        allow delete: if hasRole('editor') || isAdmin() || hasRole('manager');
    }

    match /subscriptions/{subId} {
      allow read, create, update: if isAuthenticated();
      allow delete: if hasRole('manager') || isAdmin();
    }

    match /subscription_installments/{installmentId} {
      allow read, create, update: if isAuthenticated();
      allow delete: if hasRole('manager') || isAdmin();
    }

    match /settings/{docId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    match /sequences/{seqId} {
        allow read, write: if isAuthenticated();
    }

    match /audit_logs/{logId} {
        allow read: if hasRole('manager') || isAdmin();
        allow create: if isAuthenticated();
    }
    
    match /otp_requests/{phone} {
        allow read, write: if true; // Open for OTP flow
    }
    
    match /reconciliation_files/{fileId} {
        allow read, write: if isAuthenticated();
    }
    
    match /reconciliation_logs/{logId} {
         allow read, write: if isAuthenticated();
    }
  }
}