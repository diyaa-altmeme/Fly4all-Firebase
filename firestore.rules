rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function hasPermission(permission) {
      let userData = getUserData();
      return userData.role == 'admin' || permission in userData.permissions;
    }

    // --- Users Collection ---
    // Allow unauthenticated read access to list users on the login page.
    // Write access is still protected.
    match /users/{userId} {
      allow read: if true; 
      allow create: if hasPermission('users:create');
      allow update: if hasPermission('users:update');
      allow delete: if false; // Deletion should be handled server-side for safety
    }

    // --- Roles Collection ---
    match /roles/{roleId} {
      allow read, write: if hasPermission('users:permissions');
    }

    // --- Journal Vouchers (Central Ledger) ---
    match /journal-vouchers/{voucherId} {
      allow read: if hasPermission('vouchers:read');
      allow create: if hasPermission('vouchers:create');
      allow update: if hasPermission('vouchers:update');
      allow delete: if hasPermission('vouchers:delete');
    }

    // --- Subscriptions and Installments ---
    match /subscriptions/{subId} {
      allow read: if hasPermission('subscriptions:read');
      allow create: if hasPermission('subscriptions:create');
      allow update: if hasPermission('subscriptions:update');
      allow delete: if hasPermission('subscriptions:delete');
    }
    match /subscription_installments/{installmentId} {
      allow read, write: if hasPermission('subscriptions:payments');
    }
    match /payments/{paymentId} {
       allow read, create, update, delete: if hasPermission('subscriptions:payments');
    }

    // --- Remittances ---
    match /remittances/{remittanceId} {
      allow read: if hasPermission('remittances:read');
      allow create: if hasPermission('remittances:create');
      allow update: if hasPermission('remittances:audit') || hasPermission('remittances:receive');
      allow delete: if false;
    }

    // --- Relations (Clients/Suppliers) ---
    match /clients/{relationId} {
      allow read: if isAuthenticated(); // All authenticated users can see clients/suppliers
      allow create: if hasPermission('relations:create');
      allow update: if hasPermission('relations:update');
      allow delete: if hasPermission('relations:delete');
    }
    
    // --- Settings, Sequences, and Logs ---
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if hasPermission('settings:update');
    }
    match /sequences/{seqId} {
        allow read, write: if isAuthenticated(); // Allow server-side functions to update sequences
    }
    match /audit_logs/{logId} {
        allow read: if hasPermission('system:audit_log:read');
        allow create: if isAuthenticated(); // Allow server actions to create logs
    }
    
    // --- Fallback rule to deny all other access ---
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
